(

$isHidden := function($location){
    $sum($map($hiddenFields, function($h){
        $contains($location, $h) ? 1 : 0
    })) >= 1 ? true : false
};

$hiddenFields := [
    "identifier",
    "version",
    "revisions",
    "issued",
    "modified",
    "publisher",
    "populationSize"
];

$textArea := function($component){
    {
        "component": "TextArea",
        "name": $component.title,
        "placeholder": $component.examples[0],
        "label": $component.description,
        "limit": $component.types.maxLength,
        "required": $component.required,
        "hidden": $isHidden($component.location)
    }
};

$textField := function($component){
    {
        "component": "TextField",
        "name": $component.title,
        "placeholder": $component.examples[0],
        "label": $component.description,
        "limit": $component.types.maxLength,
        "required": $component.required,
        "hidden": $isHidden($component.location)
    }
};

$textBoxSize := function($x){
    $x.types.maxLength > 200 ?
        $textArea($x) : $textField($x)
};

$selectBox := function($component){
    {
        "component": "Select",
        "options": $map($component.types.options,function ($o){{"label":$o,"value":$o}}),
        "name": $component.title,
        "label": $component.description,
        "required": $component.required,
        "hidden": $isHidden($component.location)
    }
};

$datePicker := function($component){
    {
        "component": "DatePicker",
        "name": $component.title,
        "label": $component.description,
        "required": $component.required,
        "hidden": $isHidden($component.location)
    }
};

$autoComplete := function($component){
    {
        "component": "Autocomplete",
        "options": $map($component.types.options,function ($o){{"label":$o,"value":$o}}),
        "name": $component.title,
        "label": $component.description,
        "placeholder": $component.examples[0],
        "required": $component.required,
        "hidden": $isHidden($component.location)
    }
};

$numberBox := function($component){
    {
        "component": "TextField",
        "name": $component.title,
        "type": "number",
        "placeholder": $component.examples[0],
        "label": $component.description,
        "limit": $component.types.maxLength,
        "required": $component.required,
        "hidden": $isHidden($component.location)
    }
};

$get_component := function ($x){
    $x.is_list ?
        $autoComplete($x) :
    $x.types = "int" ?
        $numberBox($x) :
    $x.types = "date" ?
        $datePicker($x) :
    $x.types.options ? 
        $selectBox($x) : 
    $x.types.format ?
        $textField($x) :
    $x.types.pattern ?
        $textField($x) :
    $x.types.maxLength ?
        $textBoxSize($x) : $textField($x)
};

$getItemsType := function($types){
    $types.options ?
        {
            "type": $types.type,
            "enum": $types.options,
            "enum_titles": $types.options
        } :
    $types.format ?
        {
            "type": $types.type,
            "format": $types.format
        } : null
};

$listValidation := function($component){
    {
        "title": $component.title,
        "required": $component.required,
        "type": "array",
        "of": $getItemsType($component.types)
    }
};

$stringValidation := function($component){
    {
        "title": $component.title,
        "required": $component.required,
        "type": $component.types.type,
        "min": $component.types.minLength,
        "max": $component.types.maxLength
    }
};

$formatValidation := function($component){
    {
        "title": $component.title,
        "required": $component.required,
        "type": $component.types.type,
        "format": $component.types.format
    }
};

$enumValidation := function($component){
    {
        "title": $component.title,
        "required": $component.required,
        "type": $component.types.type,
        "enum": $component.types.options,
        "enum_titles": $component.types.options
    }
};

$regexValidation := function($component){
    {
        "title": $component.title,
        "required": $component.required,
        "type": $component.types.type,
        "pattern": $component.types.pattern
    }
};

$intValidation := function($component){
    {
        "title": $component.title,
        "required": $component.required,
        "type": "integer",
        "positive": true
    }
};

$dateValidation := function($component){
    {
        "title": $component.title,
        "required": $component.required,
        "type": "date"
    }
};

$get_validation := function($component){
    $component.is_list ?
        $listValidation($component) :
    $component.types.maxLength ?
        $stringValidation($component) :
    $component.types.format ?
        $formatValidation($component) :
    $component.types.options ?
        $enumValidation($component) :
    $component.types.pattern ?
        $regexValidation($component) :
    $component.types = "int" ? 
        $intValidation($component) :
    $component.types = "date" or $component.types = "datetime" ?
        $dateValidation($component) : null
};

$split_array_single_components := function($components){(
    $array_list := $filter($components, function($v){
        $contains($v.location, 'observations')
    });
    $single_list := $filter($components, function($v){
        $not($contains($v.location, 'observations'))
    });
    {
        "array_list": $array_list,
        "single_list": $single_list
    }
)};

$define_components := function($components){(
    $split := $split_array_single_components($components);
    $array_components := $define_array_components($split.array_list);
    $single_components := $map($split.single_list, function($component){
        $define_single_component($component)
    });
    $append($single_components, $array_components)
)};

$define_array_components := function($components){
    {
        "title": "Observations Array",
        "location": "observations",
        "is_array_form": true,
        "fields": $map($components, function($component){
            $define_single_component($component)
        })
    }
};

$define_single_component := function($component){
    {
        "title": $component.title,
        "is_array_form": false,
        "description": $component.description,
        "location": $component.location,
        "guidance": $component.guidance ? $component.guidance : "",
        "field": $get_component($component)
    }
};

$define_validations := function($components){(
    $split := $split_array_single_components($components);
    $array_validation := $define_array_validation($split.array_list);
    $single_validations := $map($split.single_list, $get_validation);
    $append($single_validations, $array_validation)
)};

$define_array_validation := function($components){
    {
        "title": "Observations Array",
        "type": "array",
        "items": $map($components, $get_validation)
    }
};

{
    "schema_fields": $define_components(schema_fields),
    "validation": $define_validations(schema_fields)
}

)