(
/*function to enforce any arrays to be strings */
$to_str := function($x){
  $type($x)="array" ? $join($x,';,;') : $x
};

$extract_media := function($x){
  $type($x)="array" ? $join($x.url, ',') : $x
};

$truncate := function($x,$length){
  $type($x)="number" ? $x : $x ? $substring($x,0,$length) : null
};

$null_to_number := function($x){
  $exists($x) ? $number($x) : -1
};

$auto_fill_population_size := function($populationSize, $observations){
    $populationSize = -1 ? $observations[observedNode="Persons"]^(observationDate)[0].measuredValue ~> $null_to_number : $populationSize ~> $null_to_number
};

$joinTypicalAgeRange := function($min, $max){(
    $minStr := $min ? $string($min) : $min = 0 ? $string($min) : null;
    $maxStr := $max ? $string($max) : null;
    $minStr ? $maxStr ? $join([$minStr, "-", $maxStr]) : null : null
)};

$getDatasetLinkage := function() {
  (
    $datasetLinkage := {
      "isDerivedFrom": input.enrichmentAndLinkage.derivedFrom,
      "isPartOf": input.enrichmentAndLinkage.isPartOf,
      "isMemberOf": input.enrichmentAndLinkage.similarToDatasets,
      "linkedDatasets": input.enrichmentAndLinkage.linkableDatasets
    },

    $isEmpty := $datasetLinkage.isDerivedFrom = null and $datasetLinkage.isPartOf = null and $datasetLinkage.isMemberOf = null and $datasetLinkage.linkedDatasets = null,
    $result := $isEmpty ? null : $datasetLinkage
  )
};

$getOrigin := function(){(
    $origin := {
      "purpose": $to_str(input.provenance.origin.purpose),
      "source": $to_str(input.provenance.origin.source),
      "collectionSituation": $to_str(input.provenance.origin.collectionSource),
      "imageContrast": input.provenance.origin.imageContrast
    };
    $origin = {} ? null : $origin
)};

{
  "required": {
    "gatewayId": extra.id ? extra.id : $truncate(input.identifier,50),
    "gatewayPid": extra.pid ? extra.pid : input.identifier,
    "issued": input.issued,
    "modified": input.modified,
    "version": input.version,
    "revisions": input.revisions ? [$map(input.revisions,function($r) {
      {
        "version": $r.version,
        "url": $r.url
      }
    })] : []
  },
  "summary": {
    "abstract": $truncate(input.summary.abstract,5000),
    "contactPoint": input.summary.contactPoint,
    "keywords": $to_str(input.summary.keywords),
    "controlledKeywords": $to_str([$filter( $split($to_str($keywords),','), function($v) {
      $v in extra.controlledKeywords
    })]),
    "datasetType": input.provenance.origin.datasetType ? $to_str(input.provenance.origin.datasetType) :
        extra.datasetType ? $to_str(extra.datasetType) : null,
    "datasetSubType": input.provenance.origin.datasetSubType ? $to_str(input.provenance.origin.datasetSubType) :
        extra.datasetSubType ? $to_str(extra.datasetSubType) : null,
    "populationSize": input.summary.populationSize ~> $auto_fill_population_size(input.observations),
    "description": $truncate(input.documentation.description,50000),
    "doiName": input.summary.doiName,
    "shortTitle": $truncate(input.summary.title,100),
    "title": $truncate(input.summary.title,255),
    "publisher": {
      "name": input.summary.dataCustodian.name ? input.summary.dataCustodian.name : extra.publisherName ? extra.publisherName : null,
      "gatewayId": input.summary.dataCustodian.identifier ? $truncate(input.summary.dataCustodian.identifier, 50) : extra.publisherId ? extra.publisherId : null
    },
    "inPipeline": input.documentation.inPipeline ? input.documentation.inPipeline : null
  },
  "coverage": {
    "pathway": input.coverage.pathway, 
    "spatial": $to_str(input.coverage.spatial),
    "followUp": input.coverage.followUp,
    "typicalAgeRange": $joinTypicalAgeRange(input.coverage.typicalAgeRangeMin, input.coverage.typicalAgeRangeMax),
    "datasetCompleteness": input.coverage.datasetCompleteness
  },
  "provenance": {
    "origin": $getOrigin(),
    "temporal": {
      "endDate": input.provenance.temporal.endDate,
      "startDate": input.provenance.temporal.startDate,
      "timeLag": input.provenance.temporal.timeLag ? input.provenance.temporal.timeLag : null,
      "accrualPeriodicity": input.provenance.temporal.publishingFrequency ? input.provenance.temporal.publishingFrequency : null,
      "distributionReleaseDate": input.provenance.temporal.distributionReleaseDate
    }
  },
  "accessibility": {
    "access": {
      "deliveryLeadTime": $to_str(input.accessibility.access.deliveryLeadTime), /*may need to be min/max in the future */
      "jurisdiction": $to_str(input.accessibility.access.jurisdiction),
      "dataController": input.accessibility.access.dataController,
      "dataProcessor": input.accessibility.access.dataProcessor,
      "accessRights": input.accessibility.access.accessRights ~> $to_str,
      "accessService": input.accessibility.access.accessService,
      "accessRequestCost": $to_str(input.accessibility.access.accessRequestCost), /* may need to be fixed */
      "accessServiceCategory": $to_str(input.accessibility.access.accessServiceCategory)
    },
    "usage": {
      "dataUseLimitation": input.accessibility.usage.dataUseLimitation ? 
        $to_str(input.accessibility.usage.dataUseLimitation) : null,	
      "dataUseRequirement": input.accessibility.usage.dataUseRequirements ? 
        $to_str(input.accessibility.usage.dataUseRequirements) : null,
      "resourceCreator": {
            "name": input.accessibility.usage.resourceCreator ?
                $to_str(input.accessibility.usage.resourceCreator) : null
      }
    },
    "formatAndStandards": {
      "vocabularyEncodingSchemes": input.accessibility.formatAndStandards.vocabularyEncodingScheme ? 
        $to_str(input.accessibility.formatAndStandards.vocabularyEncodingScheme) : null,
      "conformsTo": input.accessibility.formatAndStandards.conformsTo ? 
        $to_str(input.accessibility.formatAndStandards.conformsTo) : null,
      "languages": input.accessibility.formatAndStandards.language ? 
        $to_str(input.accessibility.formatAndStandards.language) : null,
      "formats": input.accessibility.formatAndStandards.format ? 
        $to_str(input.accessibility.formatAndStandards.format) : null
    }
  },
  "linkage": {
    "isGeneratedUsing": extra.isGeneratedUsing ? extra.isGeneratedUsing : null,
    "associatedMedia": $extract_media(input.documentation.associatedMedia),
    "dataUses": extra.dataUses ? extra.dataUses : null,
    "isReferenceIn": null,
    "tools": $to_str(input.enrichmentAndLinkage.tools),
    "datasetLinkage": $getDatasetLinkage(),
    "investigations":$to_str(input.enrichmentAndLinkage.investigations),
    "syntheticDataWebLink": $to_str(input.structuralMetadata.syntheticDataWebLink),
    "publicationAboutDataset": input.enrichmentAndLinkage.publicationAboutDataset,
    "publicationUsingDataset": input.enrichmentAndLinkage.publicationUsingDataset
  },
  "observations": input.observations ? [$map(input.observations,function($r) {
      {
        "observedNode": $r.observedNode,
        "measuredValue": $r.measuredValue,
        "observationDate": $r.observationDate,
        "measuredProperty": $r.measuredProperty,
        "disambiguatingDescription": $r.disambiguatingDescription
      }
    })] : [],
  "structuralMetadata": input.structuralMetadata.tables,
  "tissuesSampleCollection": input.coverage.materialType ? [$map(input.coverage.materialType,function($type) {
      {
        "materialType": $type
      }
    })] : [],
  "demographicFrequency": input.demographicFrequency ? input.demographicFrequency : null,
  "omics": input.omics ? input.omics : null
};
)