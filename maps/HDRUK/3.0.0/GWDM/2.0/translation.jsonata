(

$defaultValue := function($value,$defaultValue){
    $value ? $value : $defaultValue
};

$safeSplit := function($x,$delim){
    $x ? $x ~> $split($delim) : []
};

$allowedPublishingFrequency := [
    "Static",
    "Irregular",
    "Continuous",
    "Biennial",
    "Annual",
    "Biannual",
    "Quarterly",
    "Bimonthly",
    "Monthly",
    "Biweekly",
    "Weekly",
    "Twice a week",
    "Daily",
    "Other"
];

$allowedTimeLag := [
    "Less than 1 week",
    "1-2 weeks",
    "2-4 weeks",
    "1-2 months",
    "2-6 months",
    "6 months plus",
    "Variable",
    "Not applicable",
    "Other"
];

$allowedEncodings := [
    "LOCAL",
    "OPCS4",
    "READ",
    "SNOMED CT",
    "SNOMED RT",
    "DM PLUS D",
    "DM+D",
    "NHS NATIONAL CODES",
    "NHS SCOTLAND NATIONAL CODES",
    "NHS WALES NATIONAL CODES",
    "ODS",
    "LOINC",
    "ICD10",
    "ICD10CM",
    "ICD10PCS",
    "ICD9CM",
    "ICD9",
    "ICDO3",
    "AMT",
    "APC",
    "ATC",
    "CIEL",
    "HPO",
    "CPT4",
    "DPD",
    "DRG",
    "HEMONC",
    "JMDC",
    "KCD7",
    "MULTUM",
    "NAACCR",
    "NDC",
    "NDFRT",
    "OXMIS",
    "RXNORM",
    "RXNORM EXTENSION",
    "SPL",
    "OTHER"
];

$allowedPurpose := [
    'Research cohort',
    'Study',
    'Disease registry',
    'Trial',
    'Care',
    'Audit',
    'Administrative',
    'Financial',
    'Statuatory',
    'Other'
];

$allowedDatasetType := [
    'Health and disease',
    'Treatments/Interventions',
    'Measurements/Tests',
    'Imaging types',
    'Imaging area of the body',
    'Omics',
    'Socioeconomic',
    'Lifestyle',
    'Registry',
    'Environment and energy',
    'Information and communication',
    'Politics'
];

$allowedDatasetSubType := [
    'Mental health',
    'Cardiovascular',
    'Cancer',
    'Rare diseases',
    'Metabolic and Endocrine',
    'Neurological',
    'Reproductive',
    'Maternity and neonatology',
    'Respiratory',
    'Immunity',
    'Musculoskeletal',
    'Vision',
    'Renal and urogenital',
    'Oral and Gastrointestinal',
    'Cognitive Function',
    'Hearing',
    'Others',
    'Vaccines',
    'Preventive',
    'Therapeutic',
    'Laboratory',
    'Other diagnostics',
    'CT',
    'MRI',
    'PET',
    'X-ray',
    'Ultrasound',
    'Pathology',
    'Head',
    'Chest',
    'Arm',
    'Abdomen',
    'Leg',
    'Proteomics',
    'Transcriptomics',
    'Epigenomics',
    'Metabolomics',
    'Multiomics',
    'Metagenomics',
    'Genomics',
    'Education',
    'Crime and Justice',
    'Ethnicity',
    'Housing ',
    'Labour',
    'Ageing ',
    'Economics',
    'Marital status',
    'Social support',
    'Deprivation',
    'Religion',
    'Occupation',
    'Finances',
    'Family circumstance',
    'Smoking',
    'Physical Activity',
    'Dietary habits',
    'Alcohol',
    'Disease Registry (research)',
    'National Disease Registries and Audits',
    'Births and Deaths',
    'Not applicable'
];

$allowedSource := [
    'EPR',
    'Electronic survey',
    'LIMS',
    'Paper-based',
    'Free text NLP',
    'Machine generated',
    'Other'
];

$allowedSetting := [
    'Cohort, study, trial',
    'Clinic',
    'Primary care - Referrals',
    'Primary care - Clinic',
    'Primary care - Out of hours',
    'Secondary care - Accident and Emergency',
    'Secondary care - Outpatients',
    'Secondary care - In-patients',
    'Secondary care - Ambulance',
    'Secondary care - ICU',
    'Prescribing - Community pharmacy',
    'Prescribing - Hospital',
    'Patient report outcome',
    'Wearables',
    'Local authority',
    'National government',
    'Community',
    'Services',
    'Home',
    'Private',
    'Social care - Health care at home',
    'Social care - Other social data',
    'Census',
    'Other'
];

$allowedServiceCategory := [
    'TRE/SDE',
    'Direct access',
    'Open access',
    'Varies based on project'
];

$allowedDataUseLimitation := [
    'General research use',
    'Genetic studies only',
    'No general methods research',
    'No restriction',
    'Research-specific restrictions',
    'Research use only',
    'No linkage'
];

$allowedDataUseRequirements := [
    'Collaboration required',
    'Ethics approval required',
    'Geographical restrictions',
    'Institution-specific restrictions',
    'Not for profit use',
    'Project-specific restrictions',
    'Publication moratorium',
    'Publication required',
    'Return to database or resource',
    'Time limit on use',
    'User-specific restriction'
];

$getMaterialType := function($tissue){
    $lowercase($tissue.materialType)
};

$isValidString := function($str) { $type($str) = "string" and $str != null and $str != "" };
$isValidArray := function($arr) { $type($arr) = "array"  };

$tryMatchEnum := function($x, $allowed){(
    $cleaned := $x ? $x : ""; 
    $lowered := $join([$uppercase($substring($cleaned, 0, 1)), $substring($lowercase($cleaned), 1, $length($cleaned))]);
    $match := $filter($allowed, function($v, $i, $a){(
        $allowedLowered := $join([$uppercase($substring($v, 0, 1)), $substring($lowercase($v), 1, $length($v))]);
        $allowedLowered = $lowered ? $a[$i] : null
    )})
)};


$cleanEnum := function($x, $allowed){
    ($isValidString($x) ? 
        [$map($split($x, ","), function($v){
            $tryMatchEnum($v, $allowed)
        })] : 
        ($isValidArray($x) ? [$map($x, function($v){
            $tryMatchEnum($v, $allowed)
        })] : null )
    )
};

$cleanEnumSingle := function($x, $allowed){
    $tryMatchEnum($x, $allowed)
};


{
    "identifier": input.required.gatewayPid,
    "issued": input.required.issued,
    "modified": input.required.modified,
    "revisions": input.required.revisions,
    "version": input.required.version,
    "summary": {
        "abstract": input.summary.abstract,
        "contactPoint": input.summary.contactPoint,
        "keywords": input.summary.keywords ~> $safeSplit(';,;'),
        "doiName": input.summary.doiName,
        "title": input.summary.shortTitle,
        "dataProvider": {
            "name": input.summary.publisher.name,
            "identifier": "https://placeholder-for-publisher-page/"&input.summary.publisher.gatewayId,
            "contactPoint": input.summary.contactPoint
        },
        "populationSize": input.summary.populationSize
    },
    "documentation": {
        "description": input.summary.description,
        "associatedMedia": input.linkage.associatedMedia,
        "inPipeline": input.summary.inPipeline
    },
    "coverage":  input.coverage ~> |$|{
        "typicalAgeRangeMin": $parseInteger($safeSplit(typicalAgeRange, "-")[0], "#,##0"),
        "typicalAgeRangeMax": $parseInteger($safeSplit(typicalAgeRange, "-")[1], "#,##0"),
        "materialType": $$.input.tissuesSamplesCollection ? $map($$.input.tissuesSamplesCollection, $getMaterialType) : ["None/not available"]
    },['typicalAgeRange','gender','biologicalsamples','psychological','physical','anthropometric','lifestyle','socioeconomic']|, 
    "provenance": {
        "origin": {
            "purpose": input.provenance.origin.purpose  ~> $safeSplit(';,;') ~> $cleanEnum($allowedPurpose),
            "source": input.provenance.origin.source  ~> $safeSplit(';,;') ~> $cleanEnum($allowedSource),
            "collectionSource": input.provenance.origin.collectionSituation  ~> $safeSplit(';,;') ~> $cleanEnum($allowedSetting),
            "datasetType": input.summary.datasetType ~> $cleanEnumSingle($allowedDatasetType) ~> $defaultValue("Health and disease"),
            "datasetSubType": input.summary.datasetSubType ~> $cleanEnumSingle($allowedDatasetSubType) ~> $defaultValue("Not applicable"),
            "imageContrast": input.provenance.origin.imageContrast
        },
        "temporal": { /* input.provenance.temporal */
            "endDate": input.provenance.temporal.endDate,
            "startDate": input.provenance.temporal.startDate,
            "timeLag": $cleanEnumSingle(input.provenance.temporal.timeLag, $allowedTimeLag) ~> $defaultValue('Not applicable'),
            "publishingFrequency": $cleanEnumSingle(input.provenance.temporal.accrualPeriodicity, $allowedPublishingFrequency) ~> $defaultValue("Other"),
            "distributionReleaseDate": input.provenance.temporal.distributionReleaseDate
        }
    },
    "accessibility": input.accessibility ~> |$|{
        "access": access ~> |$|{
            "accessServiceCategory": accessServiceCategory ~> $cleanEnumSingle($allowedServiceCategory) ~> $defaultValue(null)
        }|,  
        "usage": usage ? usage ~> |$|{
            "dataUseRequirements": $safeSplit(dataUseRequirement,",")  ~> $cleanEnum($allowedDataUseRequirements) ~> $defaultValue(null),
            "dataUseLimitation": $safeSplit(dataUseLimitation,",") ~> $cleanEnum($allowedDataUseLimitation) ~> $defaultValue(null),
            "resourceCreator": resourceCreator.name
        }, ['dataUseRequirement']|,
        "formatAndStandards": formatAndStandards ? formatAndStandards ~> |$|{
            "vocabularyEncodingScheme": $$.input.accessibility.formatAndStandards.vocabularyEncodingSchemes ?
                $safeSplit($$.input.accessibility.formatAndStandards.vocabularyEncodingSchemes, ",") ~> $cleanEnum($allowedEncodings)  : [],
            "language": $$.input.accessibility.formatAndStandards.languages,
            "format": $$.input.accessibility.formatAndStandards.formats,
            "conformsTo": $safeSplit($$.input.accessibility.formatAndStandards.conformsTo, ",")
        }, ['vocabularyEncodingSchemes','languages','formats']| : null
    }|,
    "enrichmentAndLinkage": input.linkage ~> |$|{
        "tools": $defaultValue($$.extra.linkages.tools, tools ~> $safeSplit(";,;")),
        "investigations": $defaultValue($$.extra.linkages.investigrations,investigations ~> $safeSplit(";,;")),
        "derivedFrom": $defaultValue($$.extra.linkages.derivedFrom, isDerivedFrom ~> $safeSplit(";,;")),
        "isPartOf": $defaultValue($$.extra.linkages.derivedFrom, isPartOf),
        "linkableDatasets": $defaultValue($$.extra.linkages.linkableDatasets, linkedDatasets),
        "similarToDatasets": $defaultValue($$.extra.linkages.similarToDatasets, isMemberOf)
    }, ['dataUses','isGeneratedUsing','associatedMedia','isReferenceIn','syntheticDataWebLink','datasetLinkage']|,
    "observations": input.observations ~> $defaultValue([]),
    "structuralMetadata": {
        "tables": input.structuralMetadata,
        "syntheticDataWebLink": input.linkage.syntheticDataWebLink
    }
}

)